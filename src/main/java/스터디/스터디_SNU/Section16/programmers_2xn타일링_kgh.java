package 스터디.스터디_SNU.Section16;

/**
 * 1. 문제풀이시간:5분
 * 2. 컴퓨팅사고
 * n제한과 moduler 연산을 이용하기 때문에 dp를 이용해야겠다는 생각이 바로 들었고 DP를 이용하여 연산을 진행하였습니다.
 * (1) 2*N 길이의 타일이 주어지고, 우리가 가지고 있는 가로2 세로1 직사각형의 타일을 이용하여 경우의 수를 구해줄 것입니다.
 * 2*1 타일의 경우
 * 경우의수는 1입니다. 2*1의 직사각형의 타일하나만 채울 수 있기때문입니다.
 * |
 * |
 * 2*2 타일의 경우
 * 경우의 수는 2입니다. 2*1의 타일을 두개 수평의 경우, 수직의 경우를 구할 수 있습니다.
 * | |  ㅡ ㅡ
 * | |  ㅡ ㅡ
 *
 * 이런식으로 해당되는 타일의 경우의 수를 bottom up방식으로 놓고 잘 생각해보면 2*3,4....N까지 진행한다고 가정해보겠습니다.
 * 결국 2*1, 2*2의 타일의 경우의 수에 다가 2*1 직사각형을 덧붙여나가는 형식으로 진행되는것을 알 수 있습니다.
 * 즉, 2xN 크기의 직사각형을 채울 수 있는 방법의 수는 2x(N-2) 크기의 직사각형을 채울 수 있는 방법의 수 + 2x(N-1)크기의 직사각형을 채울 수 있는 방법의 수입니다.
 *
 * 3. 시간복잡도
 * O(N)
 *
 */
public class programmers_2xn타일링_kgh {

    public static void main(String[] args) {
        solution(4);
    }
    static int solution(int n) {
        int answer = 0;
        int[] dp = new int[60001];
        dp[0] = 1;
        dp[1] = 2;

        for(int i=2; i<=n; i++){
            dp[i] = dp[i-2] + dp[i-1];
            dp[i] %= 1000000007;
        }
        System.out.println(dp[n-1]);
        return answer;
    }
}
